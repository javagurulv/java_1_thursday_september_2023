В классе GreenAndHeavyAppleSearchCriteria вы найдёте реализацию
критерия поиска для тяжёлых зелёных яблок.

Параметризация поведения великолепна, потому что она позволяет
вам отделить логику итерации (цикл for) коллекции для фильтрации
и алгоритм, применяемый к каждому элементу этой коллекции.
Как следствие, вы можете повторно использовать один и тот же
метод (findApples()) и подавая в качестве параметра разные
реализации интерфейса AppleSearchCriteria добиваться разного поведения.


На данный момент, если вы хотите передать новое поведение
в метод findApples(), вам нужно объявить новый класс (этот класс
реализует интерфейс AppleSearchCriteria).

Затем, создать экземпляр этого класса, который вы используете
только один раз при передаче его в качестве параметра в метод findApples().

Придётся писать много кода (каждый раз создавать новый класс)
и это трудоемкий процесс!

А есть ли более классное решение?

В Java есть механизм, называемый анонимным классом.
Этот механизм позволяет вам объявлять и создавать экземпляр
класса одновременно.

Это позволит улучшить свой код еще на один шаг,
сделав его немного более лаконичным.

Анонимные классы похожи на нормальные классы, о которых вы уже
знаете в Java. Но у анонимных классов нет имени. Они позволяют
вам объявить и создать экземпляр класса в одно и то же время.
Другими словами, они позволяют вам создавать специальные реализации.

List<Apple> redApples = appleWarehouse.filterApples(new AppleSearchCriteria() {
    public boolean test(Apple apple) {
        return "red".equals(apple.getColor());
    }
});

При создании анонимного класса вы создаёте новый объект
(new AppleSearchCriteria()) и тут же объявляете его реализацию

{
    public boolean test(Apple apple) {
        return "red".equals(apple.getColor());
    }
}

в одно и то же время. Так как вы предоставили полную реализацию
(реализацию всех методов объявленных в этом интерфейсе, в нашем
случае это один метод test())
интерфейса AppleSearchCriteria, то Java позволяет вам создать
экземпляр реального класса, который реализует интерфейс AppleSearchCriteria.
Этот класс будет анонимным (Java сама даст ему название, сгенерирует) так как
вы сами этого не сделали (но это и не было нужно в вашем случае).


Ваше задание: в тестах попробуйте добавить тесты в которых вы создадите
анонимные классы для поиска:
- зелёных яблок;
- красных яблок;
- тяжелых яблок (> 150 г.);
- лёгких яблок (< 150 г.).