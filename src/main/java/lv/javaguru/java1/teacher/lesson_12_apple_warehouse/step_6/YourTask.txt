В предыдущем задании фермер перед вами поставил следующую задачу:
было бы действительно здорово различать легкие яблоки и тяжелые яблоки.
Тяжелые яблоки, как правило, имеют вес более 150 г.

Как вы ее решили?

Сразу написали решение в виде кода
или перед реализацией поразмышляли над задачей?

Подсказало ли вам ваше чутьё, что вес тяжёлых яблок может меняться?

Может фермер в будущем захочет отбирать
яблоки задавая разный вес?

Если вы не подумали о сказанном выше, то перед тем как читать
дальше остановитесь и придумайте как можно изменить ваше решение,
чтобы учесть приведённые выше рассуждения. Сделайте изменения
в своём коде если это необходимо!


Решение поставленной задачи можно найти в методе
AppleWarehouse.findApplesHeavierThen().

Это хорошее решение, но обратите внимание, как мы должны были
дублировать большую часть реализации для обхода списка яблок
и применение критериев фильтрации для каждого яблока.
Это несколько разочаровывает, потому что нарушает принцип
программного обеспечения DRY (Do not Repeat Yourself - не повторяйся).



Принцип DRY (Don't Repeat Yourself) - это принцип разработки
программного обеспечения, который призывает избегать дублирования
кода в системе. Суть принципа заключается в том, чтобы каждая
часть знаний или функциональности имелась только в одном месте.
Если какой-либо элемент (код, данные, логика и т.д.) повторяется
в разных частях программы, это может привести к проблемам с
обслуживанием, расширением и тестированием кода.

Преимущества принципа DRY:

1. **Улучшение обслуживаемости**: Если изменения требуются,
то их нужно будет внести только в одном месте, что упрощает
поддержку и уменьшает вероятность ошибок.

2. **Эффективность**: Написание кода один раз и его повторное
использование позволяют сэкономить время и усилия.

3. **Избегание противоречий**: Если одинаковая информация хранится
в разных местах, то это может привести к несогласованности и
противоречиям в данных или логике.

4. **Улучшение тестирования**: При наличии дублированного кода
может возникнуть необходимость в дублированном тестировании,
что усложняет процесс обеспечения качества.


Применение принципа DRY способствует более чистому,
эффективному и поддерживаемому коду, а также помогает
предотвратить множество потенциальных проблем, связанных
с дублированием информации и функциональности.