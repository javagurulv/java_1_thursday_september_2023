Пример с анонимным классом:

List<Apple> redApples = appleWarehouse.filterApples(new AppleSearchCriteria() {
    public boolean test(Apple apple) {
        return "red".equals(apple.getColor());
    }
});


Тот же пример, только используя лямбда выражение:

List<Apple> redApples = appleWarehouse.filterApples(
    (Apple apple) -> "red".equals(apple.getColor()));

Лямбда выражение позволяет убрать код связанный с объявлением
анонимного класса и тем самым значительно сократить код приложения.

Лямбда выражение использует понятие функционального интерфейса.
Лямбда выражение можно использовать везде, где используется
функциональный интерфейс.

При компиляции кода лямбда выражение преобразуется в анонимный
класс, а код лямбда выражения ("red".equals(apple.getColor()))
становится телом метода функционального интерфейса вместо которого
использовалось лямбда выражение:

List<Apple> redApples = appleWarehouse.filterApples(new AppleSearchCriteria() {
    public boolean test(Apple apple) {
        return "red".equals(apple.getColor());  // <- тело лямбда выражения
    }
});

Последнее задание: напишите тесты для всех критериев поиска
с использованием лямбда выражений наподобие этого:

List<Apple> redApples = appleWarehouse.filterApples(
    (Apple apple) -> "red".equals(apple.getColor()));

Используя понятие функционального интерфейса, анонимных классов
и лямбда выражений можно на лету (прямо в том месте где происходит
их использование) создавать разные реализации интерфейса. Для этого
можно не создавать отдельный класс, тем самым упрощая код программы.

Спасибо, что добрались до конца проекта.

Этот проект является хорошим введением в параметризацию поведения,
анонимные классы и лямбда выражения. Проект готовит слушателя
к изучению основ функционального программирования и Java Stream API.
